import{r as i}from"./vendor-react-BWjxQFbR.js";import{d as l,c as j,e as R,u as B,p as F}from"./index-BItWtqw2.js";import{c as E,b as $,e as w,n as I,u as L,h as M,w as k,q as z,p as A,f as x,m as G,j as H}from"./vendor-firebase-IMjs4EV5.js";import{f as J}from"./periodService-3cjU1pu1.js";const q=(r,t)=>`students/${r}/periods/${t}/courses`,K=async(r,t)=>{const e=E(l,q(r,t));return(await $(e)).docs.map(d=>({id:d.id,...d.data()}))},O=async(r,t)=>{try{const{periodId:e,periodCourseId:a}=t;if(!r)throw new Error("Student ID is null or undefined");if(!e)throw new Error("Period ID is null or undefined");if(!a)throw new Error("Course ID is null or undefined");const d=`students/${r}/periods/${e}/courses`,u=w(l,d,a);await I(u,t),console.log("Course added with ID: ",a);const g=E(l,"enrollments"),f=w(g);await I(f,{studentId:r,periodId:e,courseId:a});const s=w(l,`periods/${e}/courses`,a);await L(s,{enrolledStudents:M(r)});const C=E(l,`periods/${e}/courses/${a}/assignments`),m=await $(C),S=E(u,"assignments"),p=k(l);m.docs.forEach(h=>{const{title:P,contributionPercentage:c}=h.data(),{grade:b,percentage:v}=h.data(),y={id:h.id,assignmentId:h.id,title:P,grade:b||0,percentage:v||0,percentageMax:Number(c)},N=w(S,h.id);p.set(N,y)}),await p.commit(),console.log("Assignments added successfully")}catch(e){throw console.error("Error adding course: ",e),new Error("Failed to add course")}},Q=async(r,t,e)=>{const a=E(l,"enrollments"),d=z(a,A("periodId","==",t),A("courseId","==",e),A("studentId","==",r)),u=await $(d);if(u.empty)throw new Error("Enrollment not found");{const m=u.docs[0];await x(m.ref)}const g=w(l,q(r,t),e),f=await G(g);if(!f.exists())throw new Error("Course not found");const s=f.data();await x(g);const C=w(l,`students/${r}`);await L(C,{coursesIds:H(s.courseId)})},Z=r=>{const{setIsLoading:t}=j(),[e,a]=R("selectedPeriodId",null),[d]=i.useState([]),[u,g]=i.useState([]),[f,s]=i.useState(!0),[C,m]=i.useState(null),[S,p]=i.useState([]),[h,P]=R("availablePeriods",[]),{showNotification:c}=B();i.useEffect(()=>{t(f)},[f,t]);const b=async()=>{if(h.length===0)try{s(!0);const o=await J();P(o)}catch{m("Error fetching available periods"),c("Error fetching available periods","error")}finally{s(!1)}},v=async o=>{try{if(s(!0),o){a(o);const n=await F(o);p(n)}else p([])}catch{c("Error fetching available courses","error")}finally{s(!1)}},y=async o=>{try{if(!e)return;s(!0);const n=await K(o,e);g(n)}catch{c("Error fetching courses","error")}finally{s(!1)}};return i.useEffect(()=>{b()},[]),i.useEffect(()=>{r&&y(r)},[r]),i.useEffect(()=>{e&&v(e)},[e]),{loading:f,error:C,courses:d,studentCourses:u,availablePeriods:h,handleAddCourse:async(o,n)=>{try{if(!n.periodCourseId){console.error("handleAddCourse","Not period selected"),c("Not period selected","error");return}if(u.filter(D=>D.id===n.periodCourseId).length>0){c("Course already added","error");return}s(!0),await O(o,n),y(o)}catch{c("Error adding course","error")}finally{s(!1)}},handleDeleteCourse:async(o,n,D)=>{if(!D){console.error("handleDeleteCourse","Not period selected"),c("Not period selected","error");return}try{if(!n)return;s(!0),await Q(o,D,n),y(o)}catch(U){console.error(U),m("Error deleting course"),c("Error deleting course","error")}finally{s(!1)}},availableCourses:S,loadAvailableCourses:v,loadAvailablePeriods:b,setPeriodId:a}};export{Z as u};
