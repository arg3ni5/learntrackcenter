import{f as w,h as u,k as N,l as g,y as A,v as R,z as L,w as B,x as U,m as k,B as z,e as F,o as $,r as i,a as M,E as j}from"./index-BaZKZUog.js";import{f as q}from"./periodService-B9GLDZYZ.js";const x=(r,e)=>`students/${r}/periods/${e}/courses`,G=async(r,e)=>{const o=w(u,x(r,e));return(await N(o)).docs.map(n=>({id:n.id,...n.data()}))},H=async(r,e)=>{try{const{periodId:o,courseId:l}=e;if(!r)throw new Error("Student ID is null or undefined");if(!o)throw new Error("Period ID is null or undefined");if(!l)throw new Error("Course ID is null or undefined");const n=`students/${r}/periods/${e.periodId}/courses`,f=g(u,n,e.periodCourseId);await A(f,e),console.log("Course added with ID: ",e.periodCourseId);const h=w(u,"enrollments"),p=g(h);await A(p,{studentId:r,courseId:e.periodCourseId,periodId:e.periodId});const t=g(u,`periods/${e.periodId}/courses`,e.periodCourseId);await R(t,{enrolledStudents:L(r)});const v=w(u,`periods/${e.periodId}/courses/${e.courseId}/assignments`),m=await N(v),I=w(f,"assignments"),y=B(u);m.docs.forEach(d=>{const{title:P,contributionPercentage:c}=d.data(),{grade:D,percentage:E}=d.data(),C={id:d.id,assignmentId:d.id,title:P,grade:D||0,percentage:E||0,percentageMax:Number(c)},S=g(I,d.id);y.set(S,C)}),await y.commit(),console.log("Assignments added successfully")}catch(o){throw console.error("Error adding course: ",o),new Error("Failed to add course")}},J=async(r,e,o)=>{const l=g(u,x(r,e),o);console.log({studentId:r,periodId:e,courseId:o});const n=await U(l);if(!n.exists())throw new Error("Course not found");const f=n.data();await k(l);const h=g(u,`students/${r}`);await R(h,{coursesIds:z(f.courseId)})},T=r=>{const{setIsLoading:e}=F(),[o,l]=$("selectedPeriodId",null),[n]=i.useState([]),[f,h]=i.useState([]),[p,t]=i.useState(!0),[v,m]=i.useState(null),[I,y]=i.useState([]),[d,P]=$("availablePeriods",[]),{showNotification:c}=M();i.useEffect(()=>{e(p)},[p,e]);const D=async()=>{if(d.length===0)try{t(!0);const s=await q();P(s)}catch{m("Error fetching available periods"),c("Error fetching available periods","error")}finally{t(!1)}},E=async s=>{try{if(t(!0),s){l(s);const a=await j(s);y(a)}else y([])}catch{c("Error fetching available courses","error")}finally{t(!1)}},C=async s=>{try{if(!o)return;t(!0);const a=await G(s,o);h(a)}catch{c("Error fetching courses","error")}finally{t(!1)}};return i.useEffect(()=>{D()},[]),i.useEffect(()=>{r&&C(r)},[r]),i.useEffect(()=>{o&&E(o)},[o]),{loading:p,error:v,courses:n,studentCourses:f,availablePeriods:d,handleAddCourse:async(s,a)=>{try{if(!a.periodCourseId){console.log("handleAddCourse","Not period selected"),c("Not period selected","error");return}if(f.filter(b=>b.id===a.periodCourseId).length>0){c("Course already added","error");return}t(!0),await H(s,a),C(s)}catch{c("Error adding course","error")}finally{t(!1)}},handleDeleteCourse:async(s,a)=>{if(!o){console.log("handleDeleteCourse","Not period selected"),c("Not period selected","error");return}try{if(!a)return;t(!0),await J(s,o,a),C(s)}catch(b){console.error(b),m("Error deleting course"),c("Error deleting course","error")}finally{t(!1)}},availableCourses:I,loadAvailableCourses:E,loadAvailablePeriods:D,setPeriodId:l}};export{T as u};
