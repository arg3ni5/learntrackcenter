import{f as p,h as f,k as N,l as y,J as I,y as M,K as U,z as k,M as z,N as A,m as R,I as B,e as F,o as x,r as i,a as J,O as K}from"./index-lcYHgldp.js";import{f as O}from"./periodService-CX19dkY2.js";const L=(s,t)=>`students/${s}/periods/${t}/courses`,j=async(s,t)=>{const e=p(f,L(s,t));return(await N(e)).docs.map(l=>({id:l.id,...l.data()}))},G=async(s,t)=>{try{const{periodId:e,periodCourseId:a}=t;if(!s)throw new Error("Student ID is null or undefined");if(!e)throw new Error("Period ID is null or undefined");if(!a)throw new Error("Course ID is null or undefined");const l=`students/${s}/periods/${e}/courses`,d=y(f,l,a);await I(d,t),console.log("Course added with ID: ",a);const h=p(f,"enrollments"),g=y(h);await I(g,{studentId:s,periodId:e,courseId:a});const r=y(f,`periods/${e}/courses`,a);await M(r,{enrolledStudents:U(s)});const S=p(f,`periods/${e}/courses/${a}/assignments`),D=await N(S),v=p(d,"assignments"),C=k(f);D.docs.forEach(u=>{const{title:P,contributionPercentage:c}=u.data(),{grade:E,percentage:b}=u.data(),m={id:u.id,assignmentId:u.id,title:P,grade:E||0,percentage:b||0,percentageMax:Number(c)},$=y(v,u.id);C.set($,m)}),await C.commit(),console.log("Assignments added successfully")}catch(e){throw console.error("Error adding course: ",e),new Error("Failed to add course")}},H=async(s,t,e)=>{const a=p(f,"enrollments"),l=z(a,A("periodId","==",t),A("courseId","==",e),A("studentId","==",s)),d=await N(l);if(d.empty)console.error("Enrollment not found");else{const r=d.docs[0];await R(r.ref)}const h=y(f,L(s,t),e);if((await B(h)).exists())await R(h);else throw new Error("Course not found")},W=s=>{const{setIsLoading:t}=F(),[e,a]=x("selectedPeriodId",null),[l]=i.useState([]),[d,h]=i.useState([]),[g,r]=i.useState(!0),[S,D]=i.useState(null),[v,C]=i.useState([]),[u,P]=x("availablePeriods",[]),{showNotification:c}=J();i.useEffect(()=>{t(g)},[g,t]);const E=async()=>{if(u.length===0)try{r(!0);const o=await O();P(o)}catch{D("Error fetching available periods"),c("Error fetching available periods","error")}finally{r(!1)}},b=async o=>{try{if(r(!0),o){a(o);const n=await K(o);C(n)}else C([])}catch{c("Error fetching available courses","error")}finally{r(!1)}},m=async o=>{try{if(!e)return;r(!0);const n=await j(o,e);h(n)}catch{c("Error fetching courses","error")}finally{r(!1)}};return i.useEffect(()=>{E()},[]),i.useEffect(()=>{s&&m(s)},[s,e]),i.useEffect(()=>{e&&b(e)},[e]),{loading:g,error:S,courses:l,studentCourses:d,availablePeriods:u,handleAddCourse:async(o,n)=>{try{if(!n.periodCourseId){console.error("handleAddCourse","Not period selected"),c("Not period selected","error");return}if(d.filter(w=>w.id===n.periodCourseId).length>0){c("Course already added","error");return}r(!0),await G(o,n),m(o)}catch{c("Error adding course","error")}finally{r(!1)}},handleDeleteCourse:async(o,n,w)=>{if(!w){console.error("handleDeleteCourse","Not period selected"),c("Not period selected","error");return}try{if(!n)return;r(!0),await H(o,w,n),m(o)}catch(q){console.error(q),D("Error deleting course"),c("Error deleting course","error")}finally{r(!1)}},availableCourses:v,loadAvailableCourses:b,loadAvailablePeriods:E,setPeriodId:a}};export{W as u};
