import{f as d,i as f,z as I,l as h,k as i,h as e,I as g,m as C,y as D,M as w,N as u,P as E}from"./index-lcYHgldp.js";const k=async s=>{const t=d(e,"students");await f(t,s)},x=async s=>{const t=I(e),n=d(e,"students");s.forEach(o=>{const r=h(n);t.set(r,o)});try{await t.commit()}catch(o){throw console.error("Error committing batch:",o),new Error("Error adding students")}},b=async()=>{const s=d(e,"students");return(await i(s)).docs.map(n=>({id:n.id,...n.data()}))},q=async s=>{try{const t=h(e,"students",s),n=await g(t);return n.exists()?{id:n.id,...n.data()}:(console.log("No such document!"),null)}catch(t){throw console.error("Error fetching student:",t),t}},A=async s=>{const t=h(e,"students",s);await C(t)},R=async(s,t)=>{const{id:n,...o}=t,r=h(e,"students",s);await D(r,o)},z=async(s,t)=>{const n=d(e,"enrollments"),o=w(n,u("periodId","==",s),u("courseId","==",t)),m=(await i(o)).docs.map(c=>c.data().studentId).map(c=>q(c));return(await Promise.all(m)).filter(c=>c!==null)},M=async(s,t)=>{const n=d(e,"enrollments"),o=w(n,u("periodId","==",s),u("courseId","==",t)),l=(await i(o)).docs.map(a=>a.data().studentId);if(l.length===0)return await b();const m=d(e,"students"),p=[];for(let a=0;a<l.length;a+=10)p.push(l.slice(a,a+10));const c=p.map(async a=>{const S=w(m,u(E(),"not-in",a));return(await i(S)).docs.map(y=>({id:y.id,...y.data()}))});return(await Promise.all(c)).flat()};export{q as a,k as b,x as c,A as d,M as e,b as f,z as g,R as u};
